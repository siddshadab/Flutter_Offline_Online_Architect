import 'dart:io';
import 'dart:convert';
import 'package:eco_los/helpers/app_constant.dart';
import 'package:eco_los/screens/Guarantor/GuarantorDetailsBean.dart';
import 'package:eco_los/screens/LoanApplication/bean/CustomerLoanDetailsBean.dart';
import 'package:eco_los/screens/collateral/bean/CollateralBasicSelectionBean.dart';
import 'package:eco_los/screens/customerFormation/bean/CustomerListBean.dart';
import 'package:sqflite/sqflite.dart';
import 'package:path/path.dart';
import 'package:path_provider/path_provider.dart';
import 'TablesColumnFile.dart';
import 'TablesList.dart';

class AppdatabaseV2 {
  String timestamp() => DateTime.now().millisecondsSinceEpoch.toString();
  static const JsonCodec JSON = const JsonCodec();

  static final AppdatabaseV2 appDatabaseV2 =
  new AppdatabaseV2._internal();


  AppdatabaseV2._internal();

  Database _database;

  static AppdatabaseV2 get() {
    return appDatabaseV2;
  }

  bool didInit = false;

  Future<Database> _getDb() async {
    if (!didInit) await init();
    return _database;
  }

  Future init() async {
    Directory documentsDirectory = await getApplicationDocumentsDirectory();
    String path = join(documentsDirectory.path, "microfinance.db");
    _database = await openDatabase(path, version: 2,
        onCreate: (Database db, int version) async {
          // When creating the db, create the table
          // await _createCustomerMaster(db);
        }, onUpgrade: (Database db, int oldVersion, int newVersion) async {
          //await _createCustomerMaster(db);

        });
    didInit = true;
  }

  //Insert Customer Basics details
  Future<int> insertCustomerMaster(CustomerListBean bean,String custObjJson) async {

    Constant.getAppPath("This one submitted "+custObjJson.toString(),"BeforeSaveCustomer");

    String insertQuery =
        "INSERT OR REPLACE INTO ${TablesList.CUSTOMERMASTER}  ("
        "${TablesColumnFile.UUID} ,"
        "${TablesColumnFile.CUSTDATA} ,"
        "${TablesColumnFile.mcreateddt} ,"
        "${TablesColumnFile.mcreatedby} ,"
        "${TablesColumnFile.mlastupdatedt} ,"
        "${TablesColumnFile.mlastupdateby} ,"
        "${TablesColumnFile.mgeolocation} ,"
        "${TablesColumnFile.mgeolatd} ,"
        "${TablesColumnFile.mgeologd} ,"
        "${TablesColumnFile.missynctocoresys})"
        "VALUES"
        "('${bean.UUID}' ,"
        "'${custObjJson}',"
        "'${bean.mcreateddt}',"
        "'${bean.mcreatedby}',"
        "'${bean.mlastupdatedt}',"
        "'${bean.mlastupdateby}',"
        "'${bean.mgeolocation}',"
        "'${bean.mgeolatd}',"
        "'${bean.mgeologd}',"
        "'${bean.missynctocoresys}');";
    print("insert query Customer Formation" + insertQuery);
    int id;
    var db = await _getDb();
    await db.transaction((Transaction txn) async {
      id = await txn.rawInsert(insertQuery);
      print(id.toString() +
          " id after insert in ${TablesList.CUSTOMERMASTER}");
    });

    var value =await db.transaction((Transaction txn) async {
      insertQuery = "SELECT last_insert_rowid();";
    return   await txn.rawQuery(insertQuery);
    });
    print("XXXXXXXX");
    print(value);
    //return value;
  }

  _updateCustomer(String UUID) async {
    var db = await _getDb();
    Map<String, dynamic> row = {
      DatabaseHelper.columnName : 'Mary',
      DatabaseHelper.columnAge  : 32
    };

    int id = 1;

    int updateCount = await db.update(
        TablesList.CUSTOMERMASTER,
        row,
        where: '${TablesColumnFile.UUID} = ?',
        whereArgs: [UUID]);

    print(await db.query(TablesList.CUSTOMERMASTER));
  }

  //Select CustomerList
  Future<List<CustomerListBean>> selectCustomerList() async {
    var db = await _getDb();

/*    await db.transaction((Transaction txn) async {
      await txn
          .rawDelete("Delete FROM ${TablesList.CUSTOMERMASTER}");
    });*/
    var result = await db.rawQuery(
        'SELECT * FROM ${TablesList.CUSTOMERMASTER} Order by ${TablesColumnFile
            .mlastupdatedt} DESC');
    var result1 = await db
        .rawQuery('SELECT COUNT(*) FROM ${TablesList.CUSTOMERMASTER}');
    print("customer count");
    print(result1);
    List<CustomerListBean> listbean = new List<CustomerListBean>();
    CustomerListBean bean;
    try {
      for (int i = 0; i < result.length; i++) {
        bean = new CustomerListBean();
        bean = bindDataCustomerListBean(result[i]);
        listbean.add(bean);
      }
    } catch (error, stackTrace) {
      print(error.toString());
      print(stackTrace);
    }
    return listbean;
  }
  //Select Customer BindData
  CustomerListBean bindDataCustomerListBean(Map<String, dynamic> result) {
    return CustomerListBean.fromMapV2(result);
  }
  Future<CustomerListBean>  getCustomerByUUID(String UUID) async {
    var db = await _getDb();

    String query = 'SELECT * FROM ${TablesList.CUSTOMERMASTER}  WHERE ${TablesColumnFile.UUID}  = "${UUID}";';
    print(query);
    var result = await db.rawQuery(query);
    print("result result "+result.toString());

    CustomerListBean bean;
    try {
      if (result.isNotEmpty)
        bean = bindDataCustomerListBean(result[0]);
      else {
        print("result is ${result}");
      }
    }
    catch (error, stackTrace) {
      print(error.toString());
      print(stackTrace);
    }
    return bean;

  }


  //Insert Loan Basics details
  Future<int> insertLoanMaster(CustomerLoanDetailsBean bean,String laonObjJson) async {
    print("XXXXXXXXXXXXXXXXXXXXXXXX");
    for (var items in bean.toString().split(",")) {
      print(items);
    }

    Constant.getAppPath("This one submitted "+laonObjJson.toString(),"BeforeSaveLoan");

    List<int> retValue;
    String insertQuery =
        "INSERT OR REPLACE INTO ${TablesList.LOANMASTER}  ("
        "${TablesColumnFile.UUID} ,"
        "${TablesColumnFile.CUSTUUID} ,"
        "${TablesColumnFile.LOANDATA} ,"
        "${TablesColumnFile.mcreateddt} ,"
        "${TablesColumnFile.mcreatedby} ,"
        "${TablesColumnFile.mlastupdatedt} ,"
        "${TablesColumnFile.mlastupdateby} ,"
        "${TablesColumnFile.mgeolocation} ,"
        "${TablesColumnFile.mgeolatd} ,"
        "${TablesColumnFile.mgeologd} ,"
        "${TablesColumnFile.missynctocoresys})"
        "VALUES"
        "('${bean.UUID}' ,"
        "'${bean.CUSTUUID}',"
        "'${laonObjJson}',"
        "'${bean.mcreateddt}',"
        "'${bean.mcreatedby}',"
        "'${bean.mlastupdatedt}',"
        "'${bean.mlastupdateby}',"
        "'${bean.mgeolocation}',"
        "'${bean.mgeolatd}',"
        "'${bean.mgeologd}',"
        "'${bean.missynctocoresys}');";
    print("insert query Customer Formation" + insertQuery);
    int id;
    var db = await _getDb();
    await db.transaction((Transaction txn) async {
      id = await txn.rawInsert(insertQuery);
      print(id.toString() +
          " id after insert in ${TablesList.LOANMASTER}");
    });

    await db.transaction((Transaction txn) async {
      insertQuery = "SELECT last_insert_rowid();";
      var result = await txn.rawQuery(insertQuery);
      print(id.toString() +
          " id after insert in ${TablesList.LOANMASTER}");
      print("value of toooooooo1" + result.toString());

    });
    return 0;//retValue[0];
  }
  //Select Loan
  Future<List<CustomerLoanDetailsBean>> selectLoanList() async {
    var db = await _getDb();
    var result = await db.rawQuery(
        'SELECT * FROM ${TablesList.LOANMASTER} Order by ${TablesColumnFile
            .mlastupdatedt} DESC');
    var result1 = await db
        .rawQuery('SELECT COUNT(*) FROM ${TablesList.LOANMASTER}');
    print("Loan count");
    print(result1);
    List<CustomerLoanDetailsBean> listbean = new List<CustomerLoanDetailsBean>();
    CustomerLoanDetailsBean bean;
    try {
      for (int i = 0; i < result.length; i++) {
        bean = new CustomerLoanDetailsBean();
        bean = bindDataLoanBean(result[i]);
        listbean.add(bean);
      }
    } catch (error, stackTrace) {
      print(error.toString());
      print(stackTrace);
    }
    return listbean;
  }

  //Select Loan on passed query
  Future<CustomerLoanDetailsBean> selectLoanOnQueryBased(String query) async {
    var db = await _getDb();
    var result = await db.rawQuery(query);
    CustomerLoanDetailsBean bean;
    try {
      for (int i = 0; i < result.length; i++) {
        bean = new CustomerLoanDetailsBean();
        bean = bindDataLoanBean(result[i]);
      }
    } catch (error, stackTrace) {
      print(error.toString());
      print(stackTrace);
    }
    return bean;
  }


  //Select Loan BindData
  CustomerLoanDetailsBean bindDataLoanBean(Map<String, dynamic> result) {
    return CustomerLoanDetailsBean.fromMapV2(result);
  }


  //Insert Guaranter Basics details
  Future<int> insertGuaranterMaster(GuarantorDetailsBean bean,String guarObjJson) async {

    Constant.getAppPath("This one submitted "+guarObjJson.toString(),"BeforeSaveGuaranter");

    String insertQuery =
        "INSERT OR REPLACE INTO ${TablesList.GUARANTERMASTER}  ("
        "${TablesColumnFile.UUID} ,"
        "${TablesColumnFile.LOANUUID} ,"
        "${TablesColumnFile.CUSTUUID} ,"
        "${TablesColumnFile.GUARDATA} ,"
        "${TablesColumnFile.mcreateddt} ,"
        "${TablesColumnFile.mcreatedby} ,"
        "${TablesColumnFile.mlastupdatedt} ,"
        "${TablesColumnFile.mlastupdateby} ,"
        "${TablesColumnFile.mgeolocation} ,"
        "${TablesColumnFile.mgeolatd} ,"
        "${TablesColumnFile.mgeologd} ,"
        "${TablesColumnFile.missynctocoresys})"
        "VALUES"
        "('${bean.UUID}' ,"
        "'${bean.LOANUUID}',"
        "'${bean.CUSTUUID}',"
        "'${guarObjJson}',"
        "'${bean.mcreateddt}',"
        "'${bean.mcreatedby}',"
        "'${bean.mlastupdatedt}',"
        "'${bean.mlastupdateby}',"
        "'${bean.mgeolocation}',"
        "'${bean.mgeolatd}',"
        "'${bean.mgeologd}',"
        "'${0}');";
    print("insert query Guaranter" + insertQuery);
    int id;
    var db = await _getDb();
    await db.transaction((Transaction txn) async {
      id = await txn.rawInsert(insertQuery);
      print(id.toString() +
          " id after insert in ${TablesList.GUARANTERMASTER}");
    });

    var value =await db.transaction((Transaction txn) async {
      insertQuery = "SELECT last_insert_rowid();";
      return   await txn.rawQuery(insertQuery);
    });
    print("XXXXXXXX");
    print(value);
    //return value;
  }
  //Select GuarantorDetailsBean
  Future<List<GuarantorDetailsBean>> selectGuarList() async {
    var db = await _getDb();

    var result = await db.rawQuery(
        'SELECT * FROM ${TablesList.GUARANTERMASTER} Order by ${TablesColumnFile
            .mlastupdatedt} DESC');
    var result1 = await db
        .rawQuery('SELECT COUNT(*) FROM ${TablesList.GUARANTERMASTER}');
    print("customer count");
    print(result1);
    List<GuarantorDetailsBean> listbean = new List<GuarantorDetailsBean>();
    GuarantorDetailsBean bean;
    try {
      for (int i = 0; i < result.length; i++) {
        bean = new GuarantorDetailsBean();
        bean = bindDataGuarBean(result[i]);
        listbean.add(bean);
      }
    } catch (error, stackTrace) {
      print(error.toString());
      print(stackTrace);
    }
    return listbean;
  }
  //Select GuarantorDetailsBean BindData
  GuarantorDetailsBean bindDataGuarBean(Map<String, dynamic> result) {
    return GuarantorDetailsBean.fromMapV2(result);
  }


  //Insert COllaterals Basics details
  Future<int> insertCollateralsMaster(CollateralBasicSelectionBean bean,String collObjJson) async {

    Constant.getAppPath("This one submitted "+collObjJson.toString(),"BreforeSaveCollateral");

    String insertQuery =
        "INSERT OR REPLACE INTO ${TablesList.COLLATERALSMASTER}  ("
        "${TablesColumnFile.UUID} ,"
        "${TablesColumnFile.LOANUUID} ,"
        "${TablesColumnFile.CUSTUUID} ,"
        "${TablesColumnFile.GUARDATA} ,"
        "${TablesColumnFile.mcreateddt} ,"
        "${TablesColumnFile.mcreatedby} ,"
        "${TablesColumnFile.mlastupdatedt} ,"
        "${TablesColumnFile.mlastupdateby} ,"
        "${TablesColumnFile.mgeolocation} ,"
        "${TablesColumnFile.mgeolatd} ,"
        "${TablesColumnFile.mgeologd} ,"
        "${TablesColumnFile.missynctocoresys})"
        "VALUES"
        "('${bean.UUID}' ,"
        "'${bean.LOANUUID}',"
        "'${bean.CUSTUUID}',"
        "'${collObjJson}',"
        "'${bean.mcreateddt}',"
        "'${bean.mcreatedby}',"
        "'${bean.mlastupdatedt}',"
        "'${bean.mlastupdateby}',"
        "'${bean.mgeolocation}',"
        "'${bean.mgeolatd}',"
        "'${bean.mgeologd}',"
        "'${0}');";
    print("insert query Customer Formation" + insertQuery);
    int id;
    var db = await _getDb();
    await db.transaction((Transaction txn) async {
      id = await txn.rawInsert(insertQuery);
      print(id.toString() +
          " id after insert in ${TablesList.GUARANTERMASTER}");
    });

    var value =await db.transaction((Transaction txn) async {
      insertQuery = "SELECT last_insert_rowid();";
      return   await txn.rawQuery(insertQuery);
    });
    print("XXXXXXXX");
    print(value);
    //return value;
  }
  //Select GuarantorDetailsBean
  Future<List<CollateralBasicSelectionBean>> selectCollList() async {
    var db = await _getDb();

    var result = await db.rawQuery(
        'SELECT * FROM ${TablesList.COLLATERALSMASTER} Order by ${TablesColumnFile
            .mlastupdatedt} DESC');
    var result1 = await db
        .rawQuery('SELECT COUNT(*) FROM ${TablesList.COLLATERALSMASTER}');
    print("customer count");
    print(result1);
    List<CollateralBasicSelectionBean> listbean = new List<CollateralBasicSelectionBean>();
    CollateralBasicSelectionBean bean;
    try {
      for (int i = 0; i < result.length; i++) {
        bean = new CollateralBasicSelectionBean();
        bean = bindDataCollBean(result[i]);
        listbean.add(bean);
      }
    } catch (error, stackTrace) {
      print(error.toString());
      print(stackTrace);
    }
    return listbean;
  }
  //Select GuarantorDetailsBean BindData
  CollateralBasicSelectionBean bindDataCollBean(Map<String, dynamic> result) {
    return CollateralBasicSelectionBean.fromMapV2(result);
  }


}